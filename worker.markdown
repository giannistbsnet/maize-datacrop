---
layout: page
title: 3. Worker Setup
parent: Maize Setup
permalink: /worker/
nav_order: 3
---

# DataCROP Maize Processing Engine Worker Deployment

This is a demo deployment instance for the **Maize DataCROP version**. It deploys a Worker responsible for handling tasks within the **DataCROP Workflow Management Engine**. The deployment consists of a single container.

## Overview

The deployment utilizes **Apache Airflow** and **CeleryExecutor** for distributed task execution within the DataCROP system. Below is an explanation of the different components and configurations defined in the `docker-compose.yml` file.

## Airflow Worker Setup

- The `airflow-worker` service is set up using **Airflow's CeleryExecutor** to manage distributed task execution.
- The worker communicates with:
  - **Redis**: Used as the message broker for Celery.
  - **PostgreSQL**: Used as the backend for storing task results.

## Volumes

The following directories are mounted into the Airflow worker container to persist data and provide necessary resources:

- **DAGs**: Task definitions are stored in the `./dags` folder.
- **Logs**: Logs generated by Airflow are stored in the `./logs` folder.
- **Data**: Input and output data for tasks are stored in the `./data` folder.
- **Models**: Model data is stored in the `./models` folder.
- **Plugins**: Airflow plugins can be added via the `./plugins` folder.
- **.env**: The `.env` file is used to handle dynamic environment variables.


### REQUIREMENTS

- [Docker-CE](https://www.docker.com/)


### PREREQUISITES

Before proceeding, ensure that you have followed the setup instructions for the [airflow processing engine](https://github.com/datacrop/maze-processing-engine-airflow).

1. Clone the repository and navigate to the [`.env` file](.env) and ensure that all necessary environment variables are set correctly for your deployment. The most important variables to update are:
   - `WORKER_NAME`: The display name of your worker.
   - `AIRFLOW_IP`: The IP address of the host running Airflow.
   - `HOST_IP`: The IP address of the host machine.

   Make sure to review and adjust any other variables in the `.env` file based on your specific setup.

2. Open the `docker-compose.yml` file and locate the **airflow-worker** section. Under the `extra_hosts` field, update the following IP addresses:
   - **Redis**: Set the correct IP address for your Redis instance.
   - **PostgreSQL**: Set the correct IP address for your PostgreSQL database.

   These changes are necessary to ensure proper communication between the Airflow worker, Redis, and PostgreSQL services.


### Start The Application.

1. Navigate to the source directory containing the `docker-compose.yml` file.
2. Run the following command:

    ```bash
    docker compose up -d
    ```


### Verify that everything is up and running

Wait for the services to start, then run the following commands:

- Check if the container is running (change `worker_name` with the actual name that you specified in the .env file):

    ```bash
    docker ps --filter name=[worker_name] --format "table {% raw %}{{.Image}}{% endraw %}\t{% raw %}{{.Names}}{% endraw %}"
    ```

    You should see the following output:

    ```bash
    IMAGE                                        NAMES
    [worker_name]-airflow-worker                [worker_name]
    ```


### Make Sure Everything Works

1. Open a browser and navigate to the `flower web app` (http://{Your IP}:5555/workers).
2. Enter the credentials provided by your organization for celery.
3. After successful authentication, you will be redirected to the workers page, where the newly created worker should appear in the workers table. If its status is marked as **online**, the setup was completed successfully.


#### Stop everything.

Navigate to the source directory and run the following command.

    docker-compose down